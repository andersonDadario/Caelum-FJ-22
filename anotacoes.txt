Argentum

1) Dados
2) Negociação
3) Candlestick
4) Série Temporal
5) Gráfico

~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~
Principais conceitos:
	- good practice: criar outro source folder p/ JUnit
	- mesmo final, é possível alterar o objeto para qual
			   [a  variável de referência aponta
	- import static para métodos e atributos estáticos de
					     [qualquer classe
	- @test aceita parâmetros, como "expected"
	- CAST no Java é mais usado do que eu pensava
~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~

Especificação SAX evoluiu para JAX

~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~

1) Class classe = Class.forName(pacote + nomeDaClasse)

2) Class classe = new Negociacao().getClass();

3) Class classe = Negociacao.class

~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~

Mandrakisses

Dado o código
	Calendar.getData(){
		return data;
	}

Retorna a referência para a Data, portanto
utilizando o código abaixo:

	Negociacao n = new Negociacao(...);
	Calendar cal = n.getData();
	cal.set(Calendar.DAY, 20);

É possível alterar o valor da data, mesmo sem
haver um setter.

A solução para esse problema é:
	Calendar.getData(){
		return (Calendar)this.data.clone();
	}

~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~

JUnit

> mesmo pacote
> source folder diferente
> <classe>Test
> métodos de teste são void
> métodos de teste possuem a anotação "@test"

~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~

Considere utilizar um Builder caso o construtor
possua muitos parâmetros. (Obs: FluentInterface)

~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~

Dê preferência às exceções padrões do Java

~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~
Calendar
	- Tem i18n, ao invés da classe Date
	Calendar cal = Calendar.getInstance();
	cal.add(Calendar.DAY, 1);
	cal.get(Calendar.MONTH);
	cal.set(Calendar.YEAR, 2013);

	Bizarrisses:
		// Remover dia
		cal.add(Calendar.DAY, -1);

		// Mês começa em 0, por isso se usa constantes
		cal.set(Calendar.MONTH, Calendar.NOVEMBER)

	Solução: Joda Time

